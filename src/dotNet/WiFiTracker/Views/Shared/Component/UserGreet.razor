@inject UserStateService user
@inject NavigationManager nav
@inject DialogService dialog
@inject LanguageService ls


@if (userLogged)
{
	<div class="row me-3">
		<div class="col">
			<RadzenText Text=@($"{@ls.get(LanguageService.Words.Hello)}, {user.CurrentUser?.UserName} / {user.CurrentAccount?.AccountLoginId}") class="text-white" />
		</div>
		<div class="col-2">
			<RadzenLink @onclick=@(()=>{nav.NavigateTo("user/logout", true);}) class="text-white" Text="@ls.get(LanguageService.Words.Logout)" />
		</div>
	</div>
}
else
{
	<RadzenButton Variant="Variant.Text" Click=@(async()=>await dialog.OpenAsync<LoginDialog>("", null, new DialogOptions(){ ShowTitle=false, CloseDialogOnEsc=true, CloseDialogOnOverlayClick=true, AutoFocusFirstElement=true})) class="text-white" Text="@ls.get(LanguageService.Words.Login)" />
	<RadzenButton Variant="Variant.Text" Click=@(async()=>await dialog.OpenAsync<RegisterDialog>("", null, new DialogOptions(){ ShowTitle=false, CloseDialogOnEsc=true, CloseDialogOnOverlayClick=true, AutoFocusFirstElement=true})) class="text-white" Text="@ls.get(LanguageService.Words.Register)" />
}




@code {
	bool userLogged = false;
	protected override void OnInitialized()
	{
		user.LoadLoggedUserData();
		userLogged = user.CurrentUser != null;
	}
}